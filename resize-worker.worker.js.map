{"version":3,"file":"resize-worker.worker.js","mappings":"mBAiCAA,UAAY,SAACC,GACX,IAAMC,EAAOD,EAAMC,MA/BrB,SAAgBC,EAAgBC,GAC9B,IAAMC,EC0CD,SAAyBC,EAAsBC,GASpD,IARA,IAAMC,EAAgBF,EAAUG,MAC1BC,EAAiBJ,EAAUK,OAC3BC,EAAWC,KAAKC,MAAMN,EAAgBD,GACtCQ,EAAYF,KAAKC,MAAMJ,EAAiBH,GACxCS,EAAe,IAAIC,UAAUL,EAAUG,GACvCG,EAAeZ,EAAUJ,KACzBiB,EAAUH,EAAad,KAEpBkB,EAAI,EAAGA,EAAIL,EAAWK,IAE7B,IADA,IAAMC,GAAcD,EAAI,IAAOb,EAAQ,GAAO,EACrCe,EAAI,EAAGA,EAAIV,EAAUU,IAAK,CACjC,IACMC,EAA0D,GAAzCF,EAAYb,IADfc,EAAI,IAAOf,EAAQ,GAAO,IAExCiB,EAAgC,GAApBJ,EAAIR,EAAWU,GAEjCH,EAAQK,EAAW,GAAKN,EAAaK,EAAgB,GACrDJ,EAAQK,EAAW,GAAKN,EAAaK,EAAgB,GACrDJ,EAAQK,EAAW,GAAKN,EAAaK,EAAgB,GACrDJ,EAAQK,EAAW,GAAKN,EAAaK,EAAgB,E,CAIzD,OAAOP,CACT,CDlE0BS,CAAgBtB,EAAKC,GAEvCsB,EADe,IAAIC,gBAAgBtB,EAAgBI,MAAOJ,EAAgBM,QAC7CiB,WAAW,kBAE9C,GAAsB,OAAlBF,EACF,MAAM,IAAIG,MAAM,iDAGlBC,kBAAkB3B,EAAK,CACrB4B,YAAa5B,EAAIM,MAAQL,EACzB4B,aAAc7B,EAAIQ,OAASP,IAC1B6B,MAAK,SAACC,GACPR,EAAcS,wBAAwBD,GACtCR,EAAcU,OAAOC,gBAAgBJ,MAAK,SAACK,IACzC,SAAwBA,GACtB,OAAO,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WAAM,OAAAH,EAAQC,EAAOG,OAAf,EACzBH,EAAOI,cAAcP,EACvB,GACF,EAEAQ,CAAeR,GAAML,MAAK,SAACc,GACzBC,YEVC,CACLC,IFS8BF,GAC5B,GACF,GACF,GACF,CAKEG,CADmBhD,EAAI,IAAJA,EAAI,EAEzB,C","sources":["webpack://AutoStegano/./src/web-worker/resize-worker.ts","webpack://AutoStegano/./src/main-app/image-functions.ts","webpack://AutoStegano/./src/shared/resize-worker-protocol.ts"],"sourcesContent":["import { makeResizeRes, ResizeReq } from \"../shared/resize-worker-protocol\";\nimport { resizeImageData } from \"../main-app/image-functions\";\n\nfunction resize(img: ImageData, s: number): void {\n  const scaledImageData = resizeImageData(img, s);\n  const resizeCanvas = new OffscreenCanvas(scaledImageData.width, scaledImageData.height);\n  const resizeContext = resizeCanvas.getContext(\"bitmaprenderer\");\n\n  if (resizeContext === null) {\n    throw new Error(\"Failed to get 2D rendering context for canvas\");\n  }\n\n  createImageBitmap(img, {\n    resizeWidth: img.width * s,\n    resizeHeight: img.height * s,\n  }).then((btmp: ImageBitmap) => {\n    resizeContext.transferFromImageBitmap(btmp);\n    resizeContext.canvas.convertToBlob().then((blob: Blob) => {\n      function blob_to_base64(blob: Blob): Promise<string> {\n        return new Promise((resolve) => {\n          const reader = new FileReader();\n          reader.onloadend = () => resolve(reader.result as string);\n          reader.readAsDataURL(blob);\n        });\n      }\n\n      blob_to_base64(blob).then((d_url: string) => {\n        postMessage(makeResizeRes(d_url));\n      });\n    });\n  });\n}\n\nonmessage = (event: MessageEvent): void => {\n  const data = event.data as ResizeReq;\n  const { img, s } = data;\n  resize(img, s);\n};\n","import { RGB } from \"./rgb\";\n\nexport function imageDataToPixels(imageData: ImageData): RGB<Uint8ClampedArray> {\n  const n = imageData.width,\n    m = imageData.height;\n  const red = new Uint8ClampedArray(m * n);\n  const green = new Uint8ClampedArray(m * n);\n  const blue = new Uint8ClampedArray(m * n);\n  let i = 0;\n  for (let y = 0; y < m; y++) {\n    for (let x = 0; x < n; x++) {\n      const q = x * m + y;\n      red[q] = imageData.data[i];\n      green[q] = imageData.data[i + 1];\n      blue[q] = imageData.data[i + 2];\n      i += 4; // skip alpha value\n    }\n  }\n  return { red: red, green: green, blue: blue };\n}\n\nexport function loadImage(src: string, callback: (img: HTMLImageElement) => void): void {\n  const img = new Image();\n  img.onload = (): void => {\n    callback(img);\n  };\n  if (/^http/.test(src)) {\n    console.log(\"cors\");\n    // absolute url: use CORS proxy http://crossorigin.me\n    img.crossOrigin = \"anonymous\";\n    img.src = \"http://crossorigin.me/\" + src;\n  } else {\n    // relative url: load directly\n    img.src = src;\n  }\n}\n\nexport function getImageData(img: HTMLImageElement): ImageData {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = img.width;\n  canvas.height = img.height;\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  ctx.drawImage(img, 0, 0);\n  return ctx.getImageData(0, 0, img.width, img.height);\n}\n\nexport function resizeImageData(imageData: ImageData, scale: number) {\n  const originalWidth = imageData.width;\n  const originalHeight = imageData.height;\n  const newWidth = Math.round(originalWidth * scale);\n  const newHeight = Math.round(originalHeight * scale);\n  const newImageData = new ImageData(newWidth, newHeight);\n  const originalData = imageData.data;\n  const newData = newImageData.data;\n\n  for (let y = 0; y < newHeight; y++) {\n    const originalY = ((y + 0.5) / scale - 0.5) | 0;\n    for (let x = 0; x < newWidth; x++) {\n      const originalX = ((x + 0.5) / scale - 0.5) | 0;\n      const originalIndex = (originalY * originalWidth + originalX) * 4;\n      const newIndex = (y * newWidth + x) * 4;\n\n      newData[newIndex + 0] = originalData[originalIndex + 0];\n      newData[newIndex + 1] = originalData[originalIndex + 1];\n      newData[newIndex + 2] = originalData[originalIndex + 2];\n      newData[newIndex + 3] = originalData[originalIndex + 3];\n    }\n  }\n\n  return newImageData;\n}\n","export interface ResizeReq {\n  img: ImageData;\n  s: number;\n}\n\nexport function makeResizeReq(img: ImageData, s: number): ResizeReq {\n  return {\n    img,\n    s,\n  }\n}\n\nexport interface ResizeRes {\n  url: string;\n}\n\nexport function makeResizeRes(url: string): ResizeRes {\n  return {\n    url,\n  }\n}"],"names":["onmessage","event","data","img","s","scaledImageData","imageData","scale","originalWidth","width","originalHeight","height","newWidth","Math","round","newHeight","newImageData","ImageData","originalData","newData","y","originalY","x","originalIndex","newIndex","resizeImageData","resizeContext","OffscreenCanvas","getContext","Error","createImageBitmap","resizeWidth","resizeHeight","then","btmp","transferFromImageBitmap","canvas","convertToBlob","blob","Promise","resolve","reader","FileReader","onloadend","result","readAsDataURL","blob_to_base64","d_url","postMessage","url","resize"],"sourceRoot":""}